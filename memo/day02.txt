MVC model2를 사용하는 이유
	- 분업
	- 유지보수
	- 페이지가 많아서


(Spring MVC)Front-Controller 패턴	(사용이유 : 모델2방식에서 불필요한 부분안함 ex)DAO와 프론트컨트롤러 불필요)

	HandlerMapping
          ①(URL)  ↕②           ③                            ④
Client  ↔ DispatcherServlet  ↔   HandlerAdapter    ↔   Controller
          ⑥         ↕⑤(.jsp)
	ViewResolver

서블릿은 web.xml를 통한다.

	1. 사용자의 모든 Request는 Front-Controller인 DispatcherServlet을 통해 처리한다. (web.xml 참고)
	2. HandlerMapping은 Request의 처리를 담당하는 컨트롤러를 찾기 위해 존재한다.
	   HandlerMapping 인터페이스를 구현한 여러 객체중 @RequestMapping, @Controller 어노테이션이
	   적용된 것을 기준으로 판단하며, 적절한 컨트롤러가 찾아졌다면 HandlerAdapter를 이용해서 해당
	   컨트롤러를 동작시킨다.
	3. Controller는 Request를 처리하는 비지니스로직을 작성하며, View에 전달해야 하는 데이터는 주로
	   Model객체에 담아서 전달한다. 이에 대한 처리는 ViewResolver를 이용하게 된다.
	4. ViewResolver는 Controller가 리턴한 결과를 어떤 View에서 처리하는 것이 좋을 지 해석하는 역할이다.
	   (servlet-context.xml 참고)
	5. 만들어진 응답은 DispatcherServlet을 통해서 전송된다.

Spring MVC Controller 특징
	- HttpServletRequest, HttpServletResponse를 거의 사용할 필요 없이 기능을 구현할 수 있다.
	- 다양한 타입의 파라미터 처리, 다양한 타입의 리턴 타입 사용 가능
	- GET방식, POST방식 등 전송 방식에 대한 처리를 어노테이션으로 처리 가능
	- 상속/인터페이스 방식 대신 어노테이션만으로도 설정 가능

Model(데이터 전달자)
	Model객체는 컨트롤러에서 생선된 데이터를 담아서 JSP에 전달하는 역할을 한다.
	반면 기본 자료형의 경우에는 파라미터로 선언하더라도 화면까지는 전달되지 않는다.

