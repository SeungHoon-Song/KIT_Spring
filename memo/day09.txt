AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍
	관점이란 개발에 있어서, 관심사(concern)를 의미한다.
	관심사는 개발 시 필요한 것들을 생각하는 일이며,
	아래와 같다.

	- 파라미터가 잘 전달 되었는가?
	- 이 로직에서 발생할 수 있는 모든 예외를 처리하자!
	- 적절한 권한을 가진 사용자가 작업하고 있는가?

	핵심 로직은 아니지만 반복적으로 개발에 필요한 관심사들이다.
	따라서 AOP는 이러한 것들을 모듈로 분리하여 작성하고
	핵심 비지니스 로직만을 작성하도록 한다.

	예) 나눗셈 프로그램 개발 시 두 개의 숫자를 나누는 것은 핵심로직(종단관심사),
	     0으로 나누는 지 체크하는 것을 주변로직(횡단관심사)이라고 한다.

	즉, 반복적으로 나타나는 횡단관심사를 모듈로 분리한 후 적절한 곳에
	로직을 주입하는 것이 AOP이다. 스프링에서는 별도의 복잡한 설정 없이
	간편하게 AOP의 기능들을 구현할 수 있기 때문에 중요한 특징 중 하나이다.

AOP를 사용할 수 있을 때
	- Around(전 구역)
	- Before(메소드 시작 직후)
	- After(메소드 종료 직전)

	- AfterReturning(메소드 정상종료 후)
	- AfterThrowing(메소드에서 예외 발생 종료 후)

--------------------------------------------------------------------------------------------------------------------------------------------
트랜잭션
	하나의 쿼리만 사용한다면 예외 발생 후 DB에는 변화가 없다.
	하지만 여러 개의 쿼리(하나의 트랜잭션)을 순차적으로 실행 후 문제 발생 시
	성공한 쿼리문만 반영되어 다시 직접 복구해야하는 문제가 발생한다.
	이러한 문제를 막기 위해 스프링에서는 @Transactional 어노테이션을 사용하여
	한 개의 트랜잭션에 문제 발생 시 롤백을 통해 트랜잭션이 모두
	DB에 반영되지 못하도록 막아준다.

